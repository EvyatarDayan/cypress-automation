# This file comes from the infra repo. 
# If you wish to have a dedicated different file instead of this one, add "CUSTOM_TAG" env variable to the streamliner step of your development build, with the value "true"

name: TAG

on:
  push:
    tags: 
      - '*'   # any 

jobs:
  tag:
    if: github.event.base_ref == 'refs/heads/master'
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash

    steps:
    - name: Wait for production build to succeed
      uses: fountainhead/action-wait-for-check@v1.0.0
      id: wait-for-build-prod
      with:
        token: ${{ secrets.GH_TOKEN }}
        checkName: build-prod
        ref: ${{ github.sha }}

    - name: Halt if production build is not successfull
      if: steps.wait-for-build-prod.outputs.conclusion != 'success'
      env:
        STATUS: steps.wait-for-build-prod.outputs.conclusion
      run: |
        echo "Production build status is: ${STATUS}, not tagging this version"
        exit 1

    - name: Wait for dev to succeed
      uses: fountainhead/action-wait-for-check@v1.0.0
      id: wait-for-build-dev
      with:
        token: ${{ secrets.GH_TOKEN }}
        checkName: build-prod
        ref: ${{ github.sha }}

    - name: Halt if dev build is not successfull
      if: steps.wait-for-build-dev.outputs.conclusion != 'success'
      env:
        STATUS: steps.wait-for-build-dev.outputs.conclusion
      run: |
        echo "Dev build status is: ${STATUS}, not tagging this version"
        exit 1

    - name: Checkout master
      id:   checkout
      uses: actions/checkout@v2
      with:
        ref: refs/heads/master
        fetch-depth: '0'
        token: ${{ secrets.GH_TOKEN }}

    - name: GCP auth
      env:
        GCP_KEY: ${{ secrets.GCP_KEY }}
      run: |
        echo $GCP_KEY | base64 --decode --ignore-garbage | gcloud auth activate-service-account --quiet --key-file -
        gcloud auth configure-docker --quiet

    - name: Add tag on the container registry
      run: |
        set -x 
        env
        gcloud container images add-tag "gcr.io/apester-infra/${GITHUB_REPOSITORY#*/}:dev-${GITHUB_SHA}"  "gcr.io/apester-infra/${GITHUB_REPOSITORY#*/}:dev-rel-${GITHUB_REF/refs\/tags\//}"
        gcloud container images add-tag "gcr.io/apester-infra/${GITHUB_REPOSITORY#*/}:prod-${GITHUB_SHA}" "gcr.io/apester-infra/${GITHUB_REPOSITORY#*/}:prod-rel-${GITHUB_REF/refs\/tags\//}"
        branch=$(git branch -a --contains ${GITHUB_SHA} | grep "  remotes/origin/master") || true
        if [ "$branch" == "  remotes/origin/master" ] ; then
          gcloud container images add-tag "gcr.io/apester-infra/${GITHUB_REPOSITORY#*/}:prod-${GITHUB_SHA}" "gcr.io/apester-infra/${GITHUB_REPOSITORY#*/}:master-rel-${GITHUB_REF/refs\/tags\//}"
        fi
        
    - name: Add release entry to the releases configmap
      env:
        ACTOR:          ${{ github.actor }}
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
      run: |
        set -x
        env
        echo "    RELEASE_${GITHUB_SHA}=${GITHUB_REF/refs\/tags\//}" >> .deploy/releases-configmap.yaml
        git config user.name github-actions
        git config user.email github-actions@github.com
        git add .deploy/releases-configmap.yaml
        git commit -m "Adding release ${GITHUB_REF/refs\/tags\//} to releases configmap on behalf of $ACTOR"
        git push -v
      
    - name: Auto deploy tag
      env:
        ACTOR:          ${{ github.actor }}
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
      run: |
        set -x
        env

        git config user.name github-actions
        git config user.email github-actions@github.com
        autoDeploy="0"

        for envFile in `ls .deploy/*.json` ; do
          autoDeployTags=`cat $envFile | jq -r '.autoDeployTags'`  
          if [ "$autoDeployTags" == "true" ] ; then
            jq ".release = \"${GITHUB_REF/refs\/tags\//}\"" $envFile > ${envFile}.tmp && mv -f ${envFile}.tmp ${envFile}
            envName=`echo ${envFile} |sed 's~^.deploy/~~' | sed 's~.json$~~'`
            git add $envFile
            git commit -m "Auto tag deploy of release ${GITHUB_REF/refs\/tags\//} to $envName on behalf of $ACTOR"
            autoDeploy="1"
          fi
        done  

        if [ "$autoDeploy" == "1" ] ; then 
          git push -v 
        fi
        
